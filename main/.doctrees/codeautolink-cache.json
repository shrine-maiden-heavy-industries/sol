{
  "changelog": [],
  "features": [],
  "gateware/index": [],
  "gateware/interface/gateware/index": [],
  "gateware/interface/gateware/phy": [],
  "gateware/interface/gateware/receiver": [],
  "gateware/interface/gateware/transmitter": [],
  "gateware/interface/index": [],
  "gateware/interface/pipe": [],
  "gateware/interface/serdes/ecp5": [],
  "gateware/interface/serdes/index": [],
  "gateware/interface/serdes/lfps": [],
  "gateware/interface/serdes/xc7": [],
  "gateware/interface/ulpi": [],
  "gateware/interface/utmi": [],
  "gateware/soc/cpu": [],
  "gateware/soc/event": [],
  "gateware/soc/index": [],
  "gateware/soc/memory": [],
  "gateware/soc/peripheral": [],
  "gateware/soc/simplesoc": [],
  "gateware/soc/uart": [],
  "gateware/stream/index": [],
  "gateware/usb/analyzer": [],
  "gateware/usb/index": [],
  "gateware/usb/request": [],
  "gateware/usb/stream": [],
  "gateware/usb/usb2/control": [],
  "gateware/usb/usb2/descriptor": [],
  "gateware/usb/usb2/deserializer": [],
  "gateware/usb/usb2/device": [],
  "gateware/usb/usb2/endpoint": [],
  "gateware/usb/usb2/endpoints": [],
  "gateware/usb/usb2/index": [],
  "gateware/usb/usb2/interfaces": [],
  "gateware/usb/usb2/packet": [],
  "gateware/usb/usb2/request": [],
  "gateware/usb/usb2/reset": [],
  "gateware/usb/usb2/transfer": [],
  "gateware/usb/usb3/application": [],
  "gateware/usb/usb3/device": [],
  "gateware/usb/usb3/endpoints": [],
  "gateware/usb/usb3/index": [],
  "gateware/usb/usb3/link": [],
  "gateware/usb/usb3/physical": [],
  "gateware/usb/usb3/protocol": [],
  "gateware/usb/usb3/request": [],
  "getting_started": [],
  "hardware/bringup_guide": [
    {
      "source": "\nOptionally, you can reversibly lock the bootloader region of the Debug\nController, preventing you from accidentally overwriting the bootloader.\nThis is most useful for users developing code for the Debug Controller.\n\nIf you choose to lock the bootloader, you should lock the first ``4KiB``\nof flash. Note that currently, the bootloader lock feature of *Black\nMagic Probe* devices always locks ``8KiB`` of flash; and thus cannot be\nused for LUNA.\n\nBuild/upload Luminary\n-------------------\n\nThe next bringup step is to upload the *Luminary* Debug Controller\nfirmware, which will provide an easy way to interface with the board's\nFPGA and any gateware running on it. The Luminary source is located\n[in its own repository](https://github.com/shrine-maiden-heavy-industries/luminary).\n\nYou can clone the bootloader using `git`:\n\n.. code:: sh\n\n   $ git clone https://github.com/shrine-maiden-heavy-industries/luminary\n\n\n\nYou can build and run the firmware in one step by invoking ``make``. In\norder to ensure your firmware matches the hardware it's running on,\nyou'll need to provide the hardware revision using the\n``BOARD_REVISION_MAJOR`` and ``BOARD_REVISION_MINOR`` make variables.\n\nThe board's hardware revision is printed on its silkscreen in a\n``r(MAJOR).(MINOR)`` format. Board ``r0.2`` would have a\n``BOARD_REVISION_MAJOR=0`` and a ``BOARD_REVISION_MINOR=2``. If your\nboard's revision ends in a ``+``, do not include it in the revision\nnumber.\n\nAn example invocation for a ``r0.2`` board might be:\n\n.. code:: sh\n\n   $ make BOARD_REVISION_MAJOR=0 BOARD_REVISION_MINOR=2 dfu\n\nOnce programming is complete, only LED ``E`` should be blinking;\nindicating that the Luminary firmware is idle.\n\nRunning Self-Tests\n------------------\n\nThe final step of bringup is to validate the functionality of your\nhardware. This is most easily accomplished by running SOL's interactive\nself-test applet.\n\nBefore you can run the applet, you'll need to have a working ``sol``\ndevelopment environment. See [[Setting up the development environment]]\nto get your environment set up.\n\nNext, we can check to make sure your LUNA board is recognized by the\nSOL toolchain. Running the ``luminary info`` command will list any\ndetected devices:\n\n.. code:: sh\n\n   $ luminary info\n   Detected a LUNA device!\n       Hardware: LUNA r0.2\n       Serial number: <snip>\n\nOnce you've validated connectivity, you're ready to try running the\n``interactive-test`` applet. From the root of the repository:\n\n.. code:: sh\n\n   $ python3 applets/interactive-test.py\n\n\nTroubleshooting\n---------------\n\n**Issue: some of the build files weren't found;** ``make`` **produces a message like \"** ``no rule to make target`` **\".**\n\nChances are, your clone of SOL is was pulled down without its\nsubmodules. You can pull down the relevant submodules using ``git``:\n\n.. code:: sh\n\n   $ git submodule update --init --recursive\n\n**Issue: the ``luminary info`` command doesn't see a connected board.**\n\nOn Linux, this can be caused by a permissions issue. Check first for the\npresence of your device using ``lsusb``; if you see a device with the\nVID/PID ``1d50:615c``, your board is present \u2013 and you likely have a\npermissions issue. You'll likely need to install permission-granting\nudev rules.\n",
      "names": [],
      "example": {
        "document": "hardware/bringup_guide",
        "ref_id": "build-upload-saturn-v",
        "headings": [
          "==========================\nSelf-made Hardware Bringup",
          "Build/upload Saturn-V"
        ]
      },
      "doc_lineno": 111
    }
  ],
  "hardware/custom": [
    {
      "source": "# Targeting the USB3300 PHY, which provides our clock.\nResource('ulpi', 0,\n        Subsignal('data',  Pins(data_sites,  dir = 'io')),\n        Subsignal('clk',   Pins(clk_site,    dir = 'i' )),\n        Subsignal('dir',   Pins(dir_site,    dir = 'i' )),\n        Subsignal('nxt',   Pins(nxt_site,    dir = 'i' )),\n        Subsignal('stp',   Pins(stp_site,    dir = 'o' )),\n        Subsignal('rst',   Pins(reset_site,  dir = 'o' )),\n        Attrs(IO_TYPE = 'LVCMOS33')\n    )\n",
      "names": [],
      "example": {
        "document": "hardware/custom",
        "ref_id": "high-speed-via-a-ulpi-phy",
        "headings": [
          "SOL On Your Own Hardware",
          "High-Speed via a ULPI PHY"
        ]
      },
      "doc_lineno": 76
    },
    {
      "source": "Resource('usb', 0,\n    Subsignal('d_p',    Pins('A4')),\n    Subsignal('d_n',    Pins('A2')),\n    Subsignal('pullup', Pins('D5', dir = 'o')),\n    Attrs(IO_STANDARD = 'SB_LVCMOS'),\n),\n",
      "names": [],
      "example": {
        "document": "hardware/custom",
        "ref_id": "full-speed-using-fpga-i-o",
        "headings": [
          "SOL On Your Own Hardware",
          "Full-Speed using FPGA I/O"
        ]
      },
      "doc_lineno": 149
    }
  ],
  "hardware/index": [],
  "index": [],
  "install": [
    {
      "source": ".. platform-picker::\n        .. platform-choice:: arch\n                :title: Arch Linux\n\n                .. code-block:: console\n\n                  $ sudo pacman -S python python-pip\n\n        .. platform-choice:: linux\n                :title: Other Linux\n\n                .. warning:: These instructions may be incorrect or incomplete!\n\n                For `Debian <https://www.debian.org/>`_ based systems, use ``apt`` to install ``python3`` and ``python3-pip``\n\n                .. code-block:: console\n\n                        $ sudo apt install python3 python3-pip\n\n                For `Fedora <https://getfedora.org/>`_ and other ``dnf`` based systems,\n\n                .. code-block:: console\n\n                        $ sudo dnf install python3 python3-pip\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                Install `Homebrew <https://brew.sh/>`_ if not done already, then install the requirements.\n\n                .. code-block:: console\n\n                  $ brew install python\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. warning:: These instructions may be incorrect or incomplete!\n\n                Download the latest Python installer from the `python downloads <https://www.python.org/downloads/>`_ page.\n\n                Follow the instructions and ensure that the installer installs ``pip`` and puts the python executable in your ``%PATH%``\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "installing-python",
        "headings": [
          "Installation",
          "Installing Prerequisites",
          "Installing Python"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: arch\n                :title: Arch Linux\n\n                On Arch Linux and Arch-likes, you can install nightly Yosys packages which are located in the `AUR <https://aur.archlinux.org/>`_ with an AUR helper or using ``makepkg`` directly.\n\n                Via an AUR helper like ``yay``\n\n                .. code-block:: console\n\n                  $ yay -S yosys-nightly\n\n                Via ``makepkg`` directly\n\n                .. code-block:: console\n\n                  $ git clone https://aur.archlinux.org/yosys-nightly.git\n                  $ (cd yosys-nightly && makepkg -sic)\n\n\n        .. platform-choice:: linux\n                :title: Other Linux\n\n                .. warning:: These instructions may be incorrect or incomplete!\n\n                With other Linux distributions, it is recommended to use the `OSS Cad Suite <https://github.com/YosysHQ/oss-cad-suite-build>`_ nightly build. It provides a full environment of all the tools needed built on a nightly basis. This includes Yosys and GTKWave\n\n                Simply download the latest `release <https://github.com/YosysHQ/oss-cad-suite-build/releases>`_ for your architecture, extract it to a good home, and then add it to your ``$PATH``\n\n                .. code-block:: console\n\n                  $ curl -LOJ https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2022-04-26/oss-cad-suite-linux-x64-20240710.tgz\n                  $ tar xfv oss-cad-suite-linux-x64-20240710.tgz\n                  $ export PATH=\"`pwd`/oss-cad-suite/bin:$PATH\"\n\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                For macOS systems, it is recommended to use the YoWASP distribution of the toolchain. However if you want to use the native tools, and you are using an Intel based Mac, then the `OSS Cad Suite <https://github.com/YosysHQ/oss-cad-suite-build>`_ has nightly builds for x86_64 versions of Darwin. This includes Yosys and GTKWave\n\n                Simply download the latest `release <https://github.com/YosysHQ/oss-cad-suite-build/releases>`_ for your architecture, extract it to a good home, and then add it to your ``$PATH``\n\n                .. code-block:: console\n\n                  $ curl -LOJ https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2022-04-26/oss-cad-suite-darwin-x64-20240710.tgz\n                  $ tar xfv oss-cad-suite-darwin-x64-220240710.tgz\n                  $ export PATH=\"`pwd`/oss-cad-suite/bin:$PATH\"\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. warning:: These instructions may be incorrect or incomplete!\n\n                The `OSS Cad Suite <https://github.com/YosysHQ/oss-cad-suite-build>`_ has nightly builds for x86_64 versions of Windows. This includes Yosys and GTKWave\n\n                Simply download the latest `release <https://github.com/YosysHQ/oss-cad-suite-build/releases>`_ for your architecture, extract it to a good home, and then add it to your ``%PATH%``\n\n                .. code-block:: console\n\n                        $ call %cd%\\oss-cad-suite\\environment.bat\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "installing-yosys",
        "headings": [
          "Installation",
          "Installing Prerequisites",
          "Installing Yosys"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: linux\n                :title: Linux\n\n                .. code-block:: console\n\n                        $ pip3 install --user --upgrade torii\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                .. code-block:: console\n\n                        $ pip install --user --upgrade torii\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. code-block:: doscon\n\n                        > pip install --upgrade torii\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "installing-torii",
        "headings": [
          "Installation",
          "Installing Prerequisites",
          "Installing Torii"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: linux\n                :title: Linux\n\n                .. code-block:: console\n\n                        $ pip3 install --user --upgrade sol-usb\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                .. code-block:: console\n\n                        $ pip install --user --upgrade sol-usb\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. code-block:: doscon\n\n                        > pip install --upgrade sol-usb\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "latest-release",
        "headings": [
          "Installation",
          "Installing SOL",
          "Latest release"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: linux\n                :title: Linux\n\n                .. code-block:: console\n\n                        $ pip3 install --user 'sol-usb @ git+https://github.com/shrine-maiden-heavy-industries/sol.git'\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                .. code-block:: console\n\n                        $ pip install --user 'sol-usb @ git+https://github.com/shrine-maiden-heavy-industries/sol.git'\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                .. code-block:: doscon\n\n                        > pip install \"sol-usb @ git+https://github.com/shrine-maiden-heavy-industries/sol.git\"\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "development-snapshot",
        "headings": [
          "Installation",
          "Installing SOL",
          "Development snapshot"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": ".. platform-picker::\n\n        .. platform-choice:: linux\n                :title: Linux\n\n                To install an editable development snapshot of SOL for the first time, run:\n\n                .. code-block:: console\n\n                        $ git clone https://github.com/shrine-maiden-heavy-industries/sol\n                        $ cd sol\n                        $ pip3 install --user --editable '.'\n\n                Any changes made to the ``sol`` directory will immediately affect any code that uses SOL. To update the snapshot, run:\n\n                .. code-block:: console\n\n                        $ cd sol\n                        $ git pull --ff-only origin main\n                        $ pip3 install --user --editable '.'\n\n                Run the ``pip3 install --editable .`` command each time the editable development snapshot is updated in case package dependencies have been added or changed. Otherwise, code using SOL may misbehave or crash with an ``ImportError``.\n\n        .. platform-choice:: macos\n                :title: macOS\n\n                To install an editable development snapshot of SOL for the first time, run:\n\n                .. code-block:: console\n\n                        $ git clone https://github.com/shrine-maiden-heavy-industries/sol\n                        $ cd sol\n                        $ pip install --user --editable '.'\n\n                Any changes made to the ``sol`` directory will immediately affect any code that uses SOL. To update the snapshot, run:\n\n                .. code-block:: console\n\n                        $ cd sol\n                        $ git pull --ff-only origin main\n                        $ pip install --user --editable '.'\n\n                Run the ``pip install --editable .`` command each time the editable development snapshot is updated in case package dependencies have been added or changed. Otherwise, code using SOL may misbehave or crash with an ``ImportError``.\n\n        .. platform-choice:: windows\n                :title: Windows\n\n                To install an editable development snapshot of SOL for the first time, run:\n\n                .. code-block:: doscon\n\n                        > git clone https://github.com/shrine-maiden-heavy-industries/sol\n                        > cd sol\n                        > pip install --editable .\n\n                Any changes made to the ``sol`` directory will immediately affect any code that uses SOL. To update the snapshot, run:\n\n                .. code-block:: doscon\n\n                        > cd sol\n                        > git pull --ff-only origin main\n                        > pip install --editable .\n\n                Run the ``pip install --editable .`` command each time the editable development snapshot is updated in case package dependencies have been added or changed. Otherwise, code using SOL may misbehave or crash with an ``ImportError``.\n",
      "names": [],
      "example": {
        "document": "install",
        "ref_id": "editable-development-snapshot",
        "headings": [
          "Installation",
          "Installing SOL",
          "Editable development snapshot"
        ]
      },
      "doc_lineno": null
    }
  ],
  "intro": [],
  "license": [],
  "tutorials/index": []
}